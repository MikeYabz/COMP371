#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// output to Fragment Shader
out vec3 v_color;

// Uniform
// Values that stay constant for the whole mesh.
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectonTransform;


// Light and Material Uniform Variables
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectonTransform * MV;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	//v_color = vertexColor;


	// Implement Gouraud shading here...
	// ...

	vec3 eyeVector = normalize(vec3(MV * vec4(ViewTransform[3][0] - vertexPosition_modelspace.x, ViewTransform[3][1] - vertexPosition_modelspace.y, ViewTransform[3][2] - vertexPosition_modelspace.z,0.0f)));
	vec4 lightVector = MV * vec4(WorldLightPosition.x - vertexPosition_modelspace.x, WorldLightPosition.y - vertexPosition_modelspace.y, WorldLightPosition.z - vertexPosition_modelspace.z,0.0f);
	vec3 normal = normalize(vec3(MV * vec4(vertexNormal_modelspace,0.0f)));

	vec4 normalizedLightVector = normalize(lightVector);

		//Attenuation
	float len = length(lightVector);
	float attenuationFactor = (lightAttenuation.x + lightAttenuation.y*len + lightAttenuation.z*pow(len,2));

		//Ambient
	vec3 ambient = materialCoefficients.x * lightColor;

		//Diffuse
	float diff = max(dot(normal, vec3(normalizedLightVector)), 0.0);
	vec3 diffuse = materialCoefficients.y * diff * lightColor;

		//Specular
	vec3 reflectDir = normalize(reflect(vec3(lightVector), normal));  
	float spec = pow(max(dot(-eyeVector, reflectDir), 0.0), materialCoefficients.w);
	vec3 specular = materialCoefficients.z * spec * lightColor; 

		//Sum
	v_color = (ambient + diffuse + specular) * vertexColor;

	// This should be the final color on the Vertex, including the lighting
}
