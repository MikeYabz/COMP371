#version 330 core


// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ


// Inputs
in vec3 v_color;		 // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

// Ouput data
out vec3 color;


void main()
{
	// Implment Phong Shading based on the parameters above
	// Remember that directional light don't have attenuation

		//Attenuation
	float len = length(lightVector);
	float attenuationFactor = 1 / (lightAttenuation.x + lightAttenuation.y*len + pow(lightAttenuation.z*len,2.0f));

	vec4 normalizedLightVector = normalize(lightVector);

		//Ambient
	vec3 ambient = materialCoefficients.x * lightColor;
	color = ambient * v_color;

		//Diffuse
	float diff = max(dot(normal, vec3(normalizedLightVector)), 0.0);
	vec3 diffuse = materialCoefficients.y * diff * lightColor;

		//Specular
	vec3 reflectDir = reflect(-vec3(normalizedLightVector), normal);  
	float spec = pow(max(dot(eyeVector, reflectDir), 0.0), 32);
	vec3 specular = materialCoefficients.z * spec * lightColor;  

		//Sum
	color = (ambient + ((diffuse + specular)* attenuationFactor)) * v_color;
	
}
