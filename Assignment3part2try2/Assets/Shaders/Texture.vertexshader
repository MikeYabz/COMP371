#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 vertexUV;


// Uniform Inputs
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;

// light position
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light

// Outputs to fragment shader
out vec3 normal;  // You will need this when you do per-fragment lighting
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
out vec4 v_color;
out vec2 UV;

void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	// Output position of the vertex, in clip space : MVP * position
    gl_Position =  ViewProjectionTransform * WorldTransform * vec4(vertexPosition_modelspace, 1.0f);

	normal = normalize(vec3(MV * vec4(vertexNormal_modelspace,0.0f)));
	eyeVector = normalize(vec3(MV * vec4(ViewTransform[3][0] - vertexPosition_modelspace.x, ViewTransform[3][1] - vertexPosition_modelspace.y, ViewTransform[3][2] - vertexPosition_modelspace.z,0.0f)));
	lightVector = MV * vec4(WorldLightPosition.x - vertexPosition_modelspace.x, WorldLightPosition.y - vertexPosition_modelspace.y, WorldLightPosition.z - vertexPosition_modelspace.z,0.0f);

    //normal = vertexNormal_modelspace; // Does this need to be transformed when we pass it to the fragment shader?
	v_color = vertexColor;
	UV = vertexUV;
}
