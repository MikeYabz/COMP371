#version 330 core

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent
uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

// Ouput to fragment shader
out vec3 color;

int numberOfLights;
in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector[8];     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

void main()
{
	// set the fragment color to the interpolated vertex color
	color = vec3(0.0f,0.0f,0.0f);

	numberOfLights = 1;

	for(int i=0;i<numberOfLights;i++)
	{
		vec4 normalizedLightVector = normalize(lightVector[i]);

			//Ambient
		vec3 ambient = materialCoefficients.x * lightColor;

			//Diffuse
		float diff = clamp(dot(normal, vec3(normalizedLightVector)), 0,1);
	
		vec3 diffuse = materialCoefficients.y * diff * lightColor;

			//Specular
		vec3 reflectDir = normalize(reflect(vec3(lightVector[i]), normal));  
		float spec = pow(max(dot(-eyeVector, reflectDir), 0.0f), materialCoefficients.w);
		vec3 specular = materialCoefficients.z * spec * lightColor; 

		//Sum
		color += (ambient + diffuse + specular) * v_color.rgb;
	}
}