#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec4 v_color;
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent
uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

void main()
{
	vec4 textureColor = texture( myTextureSampler, UV );

	vec4 normalizedLightVector = normalize(lightVector);

		//Ambient
	vec3 ambient = materialCoefficients.x * lightColor;

		//Diffuse
	float diff = max(dot(normal, vec3(normalizedLightVector)), 0.0);
	vec3 diffuse = materialCoefficients.y * diff * lightColor;

		//Specular
	vec3 reflectDir = normalize(reflect(vec3(lightVector), normal));  
	float spec = pow(max(dot(-eyeVector, reflectDir), 0.0), materialCoefficients.w);
	vec3 specular = materialCoefficients.z * spec * lightColor; 

		//Sum
	color = vec4((ambient + diffuse + specular),0.0f) * v_color * textureColor;


    // modulate texture color with vertex color
    //color = v_color * textureColor;

    // Alpha test - Discard Fragment below treshold
    if(color.a <= 0.02f)
        discard;
}