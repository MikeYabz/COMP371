#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// Values that stay constant for the whole mesh.
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform vec3 ViewLocation;
// light position
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light

// Outputs to fragment shader
out vec3 normal;  // You will need this when you do per-fragment lighting
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
out vec4 v_color;

void main()
{

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  ViewProjectionTransform * WorldTransform * vec4(vertexPosition_modelspace,1);

	mat4 VP = ViewProjectionTransform;
	mat4 MVP = ViewProjectionTransform * WorldTransform;

	normal = normalize(vec3(MVP * vec4(vertexNormal_modelspace,0.0f)));
	v_color = vec4(vertexColor, 1.0f);

	vec3 vertexPositionWorldSpace = vec3(WorldTransform * vec4(vertexPosition_modelspace,0.0f));

	eyeVector = normalize(vec3(MVP * vec4(ViewLocation.x - vertexPosition_modelspace.x, ViewLocation.y - vertexPosition_modelspace.y, ViewLocation.z - vertexPosition_modelspace.z,0.0f)));
	lightVector = MVP * vec4(WorldLightPosition.x - vertexPositionWorldSpace.x, WorldLightPosition.y - vertexPositionWorldSpace.y, WorldLightPosition.z - vertexPositionWorldSpace.z,WorldLightPosition.w);
	
}

